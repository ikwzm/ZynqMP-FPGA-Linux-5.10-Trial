diff --git a/drivers/gpu/drm/xlnx/Kconfig b/drivers/gpu/drm/xlnx/Kconfig
index 452a5133c..88b07ecef 100644
--- a/drivers/gpu/drm/xlnx/Kconfig
+++ b/drivers/gpu/drm/xlnx/Kconfig
@@ -16,7 +16,7 @@ config DRM_XLNX
 	depends on DRM && OF
 	select DRM_KMS_HELPER
 	select DRM_KMS_CMA_HELPER
-	select DRM_GEM_CMA_HELPER
+	select DRM_GEM_CACMA_HELPER
 	help
 	  Xilinx DRM KMS driver. Choose this option if you have
 	  a Xilinx SoCs with hardened display pipeline or soft
@@ -39,6 +39,21 @@ config DRM_XLNX_DUMB_ALIGNMENT_DEFAULT_SIZE
 	  alignment size. When used with the Lima DRM driver, the dumb 
 	  buffer alignment size must be set to 8.
 
+config DRM_XLNX_DUMB_CACHE_DEFAULT_MODE
+	int "Xilinx DRM Dumb Buffer Cache Default Mode"
+	range 0 1
+	default 0
+	depends on DRM_XLNX
+	help
+	  Thie specifies the data cache state of dumb buffer of the
+	  Xilinx DRM Driver. The dumb buffer data cache mode can also
+	  bo set in the module parameter. If not set by module parameter,
+	  this value will be set to dumb buffer data cache state.
+	  If 0 is specified, the dumb buffer data cache mode is set to
+	  write combine and read cache off.
+	  If 1 is specified, the dumb buffer data cache mode is set to
+	  write back and read cache on.
+	  
 config DRM_XLNX_BRIDGE
 	tristate "Xilinx DRM KMS bridge"
 	depends on DRM_XLNX
diff --git a/drivers/gpu/drm/xlnx/xlnx_drv.c b/drivers/gpu/drm/xlnx/xlnx_drv.c
index a2a62ada5..06af316c0 100644
--- a/drivers/gpu/drm/xlnx/xlnx_drv.c
+++ b/drivers/gpu/drm/xlnx/xlnx_drv.c
@@ -23,9 +23,12 @@
 #include <drm/drm_atomic_helper.h>
 #include <drm/drm_crtc_helper.h>
 #include <drm/drm_fb_helper.h>
-#include <drm/drm_gem_cma_helper.h>
+#include <drm/drm_gem_cacma_helper.h>
 #include <drm/drm_of.h>
 #include <drm/drm_probe_helper.h>
+#include <drm/drm_ioctl.h>
+#include <drm/drm_file.h>
+#include <drm/drm_gem.h>
 #include <drm/xlnx_drm.h>
 
 #include <linux/component.h>
@@ -63,6 +66,14 @@ static uint       xlnx_dumb_alignment_size = 0;
 module_param_named(dumb_alignment_size, xlnx_dumb_alignment_size, uint, S_IRUGO|S_IWUSR);
 MODULE_PARM_DESC(  dumb_alignment_size, "xlnx dumb buffer alignment size");
 
+#ifdef CONFIG_DRM_XLNX_DUMB_CACHE_DEFAULT_MODE
+static uint       xlnx_dumb_cache_default_mode = CONFIG_DRM_XLNX_DUMB_CACHE_DEFAULT_MODE;
+#else
+static uint       xlnx_dumb_cache_default_mode = 0;
+#endif
+module_param_named(dumb_cache_default_mode, xlnx_dumb_cache_default_mode, uint, S_IRUGO|S_IWUSR);
+MODULE_PARM_DESC(  dumb_cache_default_mode, "xlnx dumb buffer cache default mode on=1/off=0");
+
 /**
  * struct xlnx_drm - Xilinx DRM private data
  * @drm: DRM core
@@ -99,6 +110,12 @@ static int xlnx_ioctl_get_param(struct drm_device *drm, void *data, struct drm_f
 	case DRM_XLNX_PARAM_DUMB_ALIGNMENT_SIZE:
 		args->value = (__u64)xlnx_dumb_alignment_size;
 		break;
+	case DRM_XLNX_PARAM_DUMB_CACHE_AVALABLE:
+		args->value = 1;
+		break;
+        case DRM_XLNX_PARAM_DUMB_CACHE_DEFAULT_MODE:
+		args->value = (__u64)xlnx_dumb_cache_default_mode;
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -117,6 +134,9 @@ static int xlnx_ioctl_set_param(struct drm_device *drm, void *data, struct drm_f
 	case DRM_XLNX_PARAM_DUMB_ALIGNMENT_SIZE:
 		xlnx_dumb_alignment_size = (uint)args->value;
 		break;
+        case DRM_XLNX_PARAM_DUMB_CACHE_DEFAULT_MODE:
+		xlnx_dumb_cache_default_mode = (uint)args->value;
+		break;
 	default:
 		return -EINVAL;
 	}
@@ -159,6 +179,18 @@ unsigned int xlnx_get_align(struct drm_device *drm, bool scanout)
 		return xlnx_dumb_alignment_size;
 }
 
+/**
+ * xlnx_get_dumb_cache_default_mode - Return the xlnx_dumb_cache_default_mode
+ * @drm: DRM device
+ * @scanout: SCANOUT 
+ *
+ * Return: the alignment requirement
+ */
+unsigned int xlnx_get_dumb_cache_default_mode(struct drm_device *drm)
+{
+	return xlnx_dumb_cache_default_mode;
+}
+
 /**
  * xlnx_get_format - Return the current format of CRTC
  * @drm: DRM device
@@ -244,7 +276,7 @@ static const struct file_operations xlnx_fops = {
 	.open		= drm_open,
 	.release	= xlnx_drm_release,
 	.unlocked_ioctl	= drm_ioctl,
-	.mmap		= drm_gem_cma_mmap,
+	.mmap		= drm_gem_cacma_file_mmap,
 	.poll		= drm_poll,
 	.read		= drm_read,
 #ifdef CONFIG_COMPAT
@@ -253,6 +285,8 @@ static const struct file_operations xlnx_fops = {
 	.llseek		= noop_llseek,
 };
 
+extern struct vm_operations_struct drm_gem_cacma_vm_ops;
+
 static struct drm_driver xlnx_drm_driver = {
 	.driver_features		= DRIVER_MODESET | DRIVER_GEM |
 					  DRIVER_ATOMIC,
@@ -263,14 +297,14 @@ static struct drm_driver xlnx_drm_driver = {
 	.prime_fd_to_handle		= drm_gem_prime_fd_to_handle,
 	.gem_prime_export		= drm_gem_prime_export,
 	.gem_prime_import		= drm_gem_prime_import,
-	.gem_prime_get_sg_table		= drm_gem_cma_prime_get_sg_table,
-	.gem_prime_import_sg_table	= drm_gem_cma_prime_import_sg_table,
-	.gem_prime_vmap			= drm_gem_cma_prime_vmap,
-	.gem_prime_vunmap		= drm_gem_cma_prime_vunmap,
-	.gem_prime_mmap			= drm_gem_cma_prime_mmap,
-	.gem_vm_ops			= &drm_gem_cma_vm_ops,
-	.gem_free_object_unlocked	= drm_gem_cma_free_object,
-	.dumb_create			= xlnx_gem_cma_dumb_create,
+	.gem_prime_get_sg_table		= drm_gem_cacma_prime_get_sg_table,
+	.gem_prime_import_sg_table	= drm_gem_cacma_prime_import_sg_table_vmap,
+	.gem_prime_vmap			= drm_gem_cacma_prime_vmap,
+	.gem_prime_vunmap		= drm_gem_cacma_prime_vunmap,
+	.gem_prime_mmap			= drm_gem_cacma_prime_mmap,
+	.gem_vm_ops			= &drm_gem_cacma_vm_ops,
+	.gem_free_object_unlocked	= drm_gem_cacma_free_object,
+	.dumb_create			= xlnx_gem_dumb_create,
 	.dumb_destroy			= drm_gem_dumb_destroy,
 	.ioctls	                        = xlnx_drm_driver_ioctls,
 	.num_ioctls                     = ARRAY_SIZE(xlnx_drm_driver_ioctls),
diff --git a/drivers/gpu/drm/xlnx/xlnx_drv.h b/drivers/gpu/drm/xlnx/xlnx_drv.h
index a262d192e..265aeff0c 100644
--- a/drivers/gpu/drm/xlnx/xlnx_drv.h
+++ b/drivers/gpu/drm/xlnx/xlnx_drv.h
@@ -27,6 +27,7 @@ void xlnx_drm_pipeline_exit(struct platform_device *pipeline);
 
 uint32_t xlnx_get_format(struct drm_device *drm);
 unsigned int xlnx_get_align(struct drm_device *drm, bool scanout);
+unsigned int xlnx_get_dumb_cache_default_mode(struct drm_device *drm);
 struct xlnx_crtc_helper *xlnx_get_crtc_helper(struct drm_device *drm);
 struct xlnx_bridge_helper *xlnx_get_bridge_helper(struct drm_device *drm);
 
diff --git a/drivers/gpu/drm/xlnx/xlnx_gem.c b/drivers/gpu/drm/xlnx/xlnx_gem.c
index f080cedc2..54f8f33d5 100644
--- a/drivers/gpu/drm/xlnx/xlnx_gem.c
+++ b/drivers/gpu/drm/xlnx/xlnx_gem.c
@@ -18,13 +18,13 @@
 
 #include <drm/drm_drv.h>
 #include <drm/xlnx_drm.h>
-#include <drm/drm_gem_cma_helper.h>
+#include <drm/drm_gem_cacma_helper.h>
 
 #include "xlnx_drv.h"
 #include "xlnx_gem.h"
 
 /*
- * xlnx_gem_cma_dumb_create - (struct drm_driver)->dumb_create callback
+ * xlnx_gem_dumb_create - (struct drm_driver)->dumb_create callback
  * @file_priv: drm_file object
  * @drm: DRM object
  * @args: info for dumb buffer creation
@@ -33,19 +33,47 @@
  * it wraps around drm_gem_cma_dumb_create() and sets the pitch value
  * by retrieving the value from the device.
  *
- * Return: The return value from drm_gem_cma_dumb_create()
+ * Return: The return value from drm_gem_cacma_create_with_handle()
  */
-int xlnx_gem_cma_dumb_create(struct drm_file *file_priv, struct drm_device *drm,
-			     struct drm_mode_create_dumb *args)
+int
+xlnx_gem_dumb_create(struct drm_file *file_priv,
+                     struct drm_device *drm,
+                     struct drm_mode_create_dumb *args)
 {
 	bool scanout = (((args->flags) & DRM_XLNX_GEM_DUMB_SCANOUT_MASK) == DRM_XLNX_GEM_DUMB_SCANOUT);
-	int  align   = xlnx_get_align(drm, scanout);
+        bool cache;
+	int  align     = xlnx_get_align(drm, scanout);
+	int  min_pitch = DIV_ROUND_UP(args->width * args->bpp, 8);
+	struct drm_gem_object* gem_obj;
 
 	if (!args->pitch || !IS_ALIGNED(args->pitch, align))
-		args->pitch = ALIGN(DIV_ROUND_UP(args->width * args->bpp, 8), align);
+		args->pitch = ALIGN(min_pitch, align);
 
-	DRM_DEBUG("width=%d, height=%d, bpp=%d, pitch=%d, align=%d\n",
-                  args->width, args->height, args->bpp, args->pitch, align);
+	if (args->pitch < min_pitch)
+		args->pitch = min_pitch;
+
+	if (args->size < args->pitch * args->height)
+		args->size = args->pitch * args->height;
+
+	switch ((args->flags) & DRM_XLNX_GEM_DUMB_CACHE_MASK) {
+        case DRM_XLNX_GEM_DUMB_CACHE_OFF:
+            cache = false;
+            break;
+        case DRM_XLNX_GEM_DUMB_CACHE_ON:
+            cache = true;
+            break;
+        case DRM_XLNX_GEM_DUMB_CACHE_DEFAULT:
+            cache = (xlnx_get_dumb_cache_default_mode(drm) != 0);
+            break;
+        default:
+            cache = false;
+            break;
+        }
+
+	DRM_DEBUG("width=%d, height=%d, bpp=%d, pitch=%d, align=%d, cache=%d\n",
+                  args->width, args->height, args->bpp, args->pitch, align, cache);
                   
-	return drm_gem_cma_dumb_create_internal(file_priv, drm, args);
+	gem_obj = drm_gem_cacma_create_with_handle(file_priv, drm, args->size, cache, &args->handle);
+
+	return PTR_ERR_OR_ZERO(gem_obj);
 }
diff --git a/drivers/gpu/drm/xlnx/xlnx_gem.h b/drivers/gpu/drm/xlnx/xlnx_gem.h
index 2e178f67d..4a8cffe87 100644
--- a/drivers/gpu/drm/xlnx/xlnx_gem.h
+++ b/drivers/gpu/drm/xlnx/xlnx_gem.h
@@ -19,8 +19,8 @@
 #ifndef _XLNX_GEM_H_
 #define _XLNX_GEM_H_
 
-int xlnx_gem_cma_dumb_create(struct drm_file *file_priv,
-			     struct drm_device *drm,
-			     struct drm_mode_create_dumb *args);
+int xlnx_gem_dumb_create(struct drm_file *file_priv,
+        		 struct drm_device *drm,
+			 struct drm_mode_create_dumb *args);
 
 #endif /* _XLNX_GEM_H_ */
diff --git a/include/uapi/drm/xlnx_drm.h b/include/uapi/drm/xlnx_drm.h
index b9186c9a4..80064cc5a 100644
--- a/include/uapi/drm/xlnx_drm.h
+++ b/include/uapi/drm/xlnx_drm.h
@@ -24,9 +24,11 @@ extern "C" {
  * Parameter identifier of various information
  */	
 enum drm_xlnx_param {
-	DRM_XLNX_PARAM_DRIVER_IDENTIFIER      = 0,
-	DRM_XLNX_PARAM_SCANOUT_ALIGNMENT_SIZE = 1,
-	DRM_XLNX_PARAM_DUMB_ALIGNMENT_SIZE    = 2,
+	DRM_XLNX_PARAM_DRIVER_IDENTIFIER       = 0,
+	DRM_XLNX_PARAM_SCANOUT_ALIGNMENT_SIZE  = 1,
+	DRM_XLNX_PARAM_DUMB_ALIGNMENT_SIZE     = 2,
+	DRM_XLNX_PARAM_DUMB_CACHE_AVALABLE     = 3,
+	DRM_XLNX_PARAM_DUMB_CACHE_DEFAULT_MODE = 4,
 };
 
 /**
@@ -69,6 +71,12 @@ struct drm_xlnx_set_param {
 #define DRM_XLNX_GEM_DUMB_SCANOUT       (1 << DRM_XLNX_GEM_DUMB_SCANOUT_BIT)
 #define DRM_XLNX_GEM_DUMB_NON_SCANOUT   (0 << DRM_XLNX_GEM_DUMB_SCANOUT_BIT)
 	
+#define DRM_XLNX_GEM_DUMB_CACHE_BIT     (1)
+#define DRM_XLNX_GEM_DUMB_CACHE_MASK    (3 << DRM_XLNX_GEM_DUMB_CACHE_BIT)
+#define DRM_XLNX_GEM_DUMB_CACHE_DEFAULT (0 << DRM_XLNX_GEM_DUMB_CACHE_BIT)
+#define DRM_XLNX_GEM_DUMB_CACHE_OFF     (2 << DRM_XLNX_GEM_DUMB_CACHE_BIT)
+#define DRM_XLNX_GEM_DUMB_CACHE_ON      (3 << DRM_XLNX_GEM_DUMB_CACHE_BIT)
+	
 #if defined(__cplusplus)
 }
 #endif
